NAME: rabbitmq2
LAST DEPLOYED: Mon Mar 30 19:24:50 2020
NAMESPACE: default
STATUS: pending-install
REVISION: 1
TEST SUITE: None
HOOKS:
MANIFEST:
---
# Source: rabbitmq-ha/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: rabbitmq2-rabbitmq-ha
  namespace: default
  labels:
    app: rabbitmq-ha
    chart: rabbitmq-ha-1.41.1
    release: "rabbitmq2"
    heritage: "Helm"
type: Opaque
data:
  rabbitmq-username: "Z3Vlc3Q="
  rabbitmq-password: "Z3Vlc3Q="
  rabbitmq-management-username: "bWFuYWdlbWVudA=="
  rabbitmq-management-password: "NHV5emJsdHF3QzB4MTJEbWRxdFgxemdt"
  rabbitmq-erlang-cookie: "UkNLOEJodm9FTGh5dHdPaVpwZDdhWHZoSW4wYU82Vmg="
  definitions.json: "ewogICJnbG9iYWxfcGFyYW1ldGVycyI6IFsKICAgIAogIF0sCiAgInVzZXJzIjogWwogICAgewogICAgICAibmFtZSI6ICJtYW5hZ2VtZW50IiwKICAgICAgInBhc3N3b3JkIjogIjR1eXpibHRxd0MweDEyRG1kcXRYMXpnbSIsCiAgICAgICJ0YWdzIjogIm1hbmFnZW1lbnQiCiAgICB9LAogICAgewogICAgICAibmFtZSI6ICJndWVzdCIsCiAgICAgICJwYXNzd29yZCI6ICJndWVzdCIsCiAgICAgICJ0YWdzIjogImFkbWluaXN0cmF0b3IiCiAgICB9CiAgXSwKICAidmhvc3RzIjogWwogICAgewogICAgICAibmFtZSI6ICIvIgogICAgfQogIF0sCiAgInBlcm1pc3Npb25zIjogWwogICAgewogICAgICAidXNlciI6ICJndWVzdCIsCiAgICAgICJ2aG9zdCI6ICIvIiwKICAgICAgImNvbmZpZ3VyZSI6ICIuKiIsCiAgICAgICJyZWFkIjogIi4qIiwKICAgICAgIndyaXRlIjogIi4qIgogICAgfQogIF0sCiAgInRvcGljX3Blcm1pc3Npb25zIjogWwogICAgCiAgXSwKICAicGFyYW1ldGVycyI6IFsKICAgIAogIF0sCiAgInBvbGljaWVzIjogWwogICAgCiAgXSwKICAicXVldWVzIjogWwogICAgewogICAgICAgIm5hbWUiOiJteS1xdWV1ZS1wYyIsCiAgICAgICAidmhvc3QiOiIvcmFiYml0IiwKICAgICAgICJkdXJhYmxlIjp0cnVlLAogICAgICAgImF1dG9fZGVsZXRlIjpmYWxzZSwKICAgICAgICJhcmd1bWVudHMiOnt9CiAgICB9CiAgXSwKICAiZXhjaGFuZ2VzIjogWwogICAgCiAgXSwKICAiYmluZGluZ3MiOiBbCiAgICAKICBdCn0="
---
# Source: rabbitmq-ha/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: rabbitmq2-rabbitmq-ha
  namespace: default
  labels:
    app: rabbitmq-ha
    chart: rabbitmq-ha-1.41.1
    release: rabbitmq2
    heritage: Helm
data:
  enabled_plugins: |
    [
      rabbitmq_shovel,
      rabbitmq_shovel_management,
      rabbitmq_federation,
      rabbitmq_federation_management,
      

      rabbitmq_consistent_hash_exchange,
      rabbitmq_management,
      rabbitmq_peer_discovery_k8s
      
    ].

  rabbitmq.conf: |
    ## RabbitMQ configuration
    ## Ref: https://github.com/rabbitmq/rabbitmq-server/blob/master/docs/rabbitmq.conf.example

    ## Authentification

    ## Clustering
    cluster_formation.peer_discovery_backend  = rabbit_peer_discovery_k8s
    cluster_formation.k8s.host = kubernetes.default.svc.cluster.local
    cluster_formation.k8s.address_type = hostname
    cluster_formation.node_cleanup.interval = 10
    # Set to false if automatic cleanup of absent nodes is desired.
    # This can be dangerous, see http://www.rabbitmq.com/cluster-formation.html#node-health-checks-and-cleanup.
    cluster_formation.node_cleanup.only_log_warning = true
    cluster_partition_handling = autoheal
    ## The default "guest" user is only permitted to access the server
    ## via a loopback interface (e.g. localhost)
    loopback_users.guest = false

    management.load_definitions = /etc/definitions/definitions.json

    ## Memory-based Flow Control threshold
    vm_memory_high_watermark.absolute = 256MB

    ## Auth HTTP Backend Plugin

    ## LDAP Plugin

    ## MQTT Plugin

    ## Web MQTT Plugin

    ## STOMP Plugin

    ## Web STOMP Plugin

    ## Prometheus Plugin

    ## AMQPS support
---
# Source: rabbitmq-ha/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: rabbitmq-ha
    chart: rabbitmq-ha-1.41.1
    release: "rabbitmq2"
    heritage: "Helm"
  name: rabbitmq2-rabbitmq-ha
  namespace: default
automountServiceAccountToken: true
---
# Source: rabbitmq-ha/templates/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    app: rabbitmq-ha
    chart: rabbitmq-ha-1.41.1
    release: "rabbitmq2"
    heritage: "Helm"
  name: rabbitmq2-rabbitmq-ha
  namespace: default
rules:
  - apiGroups: [""]
    resources: ["endpoints"]
    verbs: ["get"]
---
# Source: rabbitmq-ha/templates/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    app: rabbitmq-ha
    chart: rabbitmq-ha-1.41.1
    release: "rabbitmq2"
    heritage: "Helm"
  name: rabbitmq2-rabbitmq-ha
  namespace: default
subjects:
  - kind: ServiceAccount
    name: rabbitmq2-rabbitmq-ha
    namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: rabbitmq2-rabbitmq-ha
---
# Source: rabbitmq-ha/templates/service-discovery.yaml
apiVersion: v1
kind: Service
metadata:
  name: rabbitmq2-rabbitmq-ha-discovery
  namespace: default
  labels:
    app: rabbitmq-ha
    chart: rabbitmq-ha-1.41.1
    release: rabbitmq2
    heritage: Helm
spec:
  clusterIP: None
  ports:
    - name: http
      protocol: TCP
      port: 15672
      targetPort: http
    - name: amqp
      protocol: TCP
      port: 5672
      targetPort: amqp
    - name: epmd
      protocol: TCP
      port: 4369
      targetPort: epmd
  publishNotReadyAddresses: true
  selector:
    app: rabbitmq-ha
    release: rabbitmq2
  type: ClusterIP
---
# Source: rabbitmq-ha/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: rabbitmq2-rabbitmq-ha
  namespace: default
  labels:
    app: rabbitmq-ha
    chart: rabbitmq-ha-1.41.1
    release: rabbitmq2
    heritage: Helm
spec:
  ports:
    - name: http
      protocol: TCP
      port: 15672
      nodePort: 30636
      targetPort: http
    - name: amqp
      protocol: TCP
      port: 5672
      nodePort: 
      targetPort: amqp
    - name: epmd
      protocol: TCP
      port: 4369
      nodePort: 
      targetPort: epmd
    
  selector:
    app: rabbitmq-ha
    release: rabbitmq2
  type: NodePort
---
# Source: rabbitmq-ha/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: rabbitmq2-rabbitmq-ha
  namespace: default
  labels:
    app: rabbitmq-ha
    chart: rabbitmq-ha-1.41.1
    release: rabbitmq2
    heritage: Helm
spec:
  podManagementPolicy: OrderedReady
  serviceName: rabbitmq2-rabbitmq-ha-discovery
  replicas: 1
  updateStrategy:
    type: OnDelete
  selector:
    matchLabels:
      app: rabbitmq-ha
      release: rabbitmq2
  template:
    metadata:
      labels:
        app: rabbitmq-ha
        release: rabbitmq2
      annotations:
        checksum/config: 8a1c3d9d92a476a301509542402193892963f72d47572dc3dd81a2e27b3ab1a9
        checksum/secret: 73e335cee38b67513797e340ec8c93f093328eda3ab1d63949151f7cdea68f9a
    spec:
      terminationGracePeriodSeconds: 10
      securityContext:
          fsGroup: 101
          runAsGroup: 101
          runAsNonRoot: true
          runAsUser: 100
      serviceAccountName: rabbitmq2-rabbitmq-ha
      initContainers:
        - name: bootstrap
          image: busybox:1.30.1
          imagePullPolicy: IfNotPresent
          command: ['sh']
          args:
          - "-c"
          - |
            set -ex
            cp /configmap/* /etc/rabbitmq
            echo "${RABBITMQ_ERLANG_COOKIE}" > /var/lib/rabbitmq/.erlang.cookie
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: RABBITMQ_MNESIA_DIR
            value: /var/lib/rabbitmq/mnesia/rabbit@$(POD_NAME).rabbitmq2-rabbitmq-ha-discovery.default.svc.cluster.local
          - name: RABBITMQ_ERLANG_COOKIE
            valueFrom:
              secretKeyRef:
                name: rabbitmq2-rabbitmq-ha
                key: rabbitmq-erlang-cookie
          resources:
            {}
          volumeMounts:
            - name: configmap
              mountPath: /configmap
            - name: config
              mountPath: /etc/rabbitmq
            - name: data
              mountPath: /var/lib/rabbitmq
      containers:
        - name: rabbitmq-ha
          image: rabbitmq:3.8.0-alpine
          imagePullPolicy: IfNotPresent
          ports:
            - name: epmd
              protocol: TCP
              containerPort: 4369
            - name: amqp
              protocol: TCP
              containerPort: 5672
            - name: http
              protocol: TCP
              containerPort: 15672
          livenessProbe:
            exec:
              command:
              - /bin/sh
              - -c
              - 'wget -O - -q --header "Authorization: Basic `echo -n \"$RABBIT_MANAGEMENT_USER:$RABBIT_MANAGEMENT_PASSWORD\"
                | base64`" http://localhost:15672/api/healthchecks/node | grep -qF "{\"status\":\"ok\"}"'
            failureThreshold: 6
            initialDelaySeconds: 120
            periodSeconds: 10
            timeoutSeconds: 5
          readinessProbe:
            exec:
              command:
              - /bin/sh
              - -c
              - 'wget -O - -q --header "Authorization: Basic `echo -n \"$RABBIT_MANAGEMENT_USER:$RABBIT_MANAGEMENT_PASSWORD\"
                | base64`" http://localhost:15672/api/healthchecks/node | grep -qF "{\"status\":\"ok\"}"'
            failureThreshold: 6
            initialDelaySeconds: 20
            periodSeconds: 5
            timeoutSeconds: 3
          env:
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
            - name: RABBITMQ_USE_LONGNAME
              value: "true"
            - name: RABBITMQ_NODENAME
              value: rabbit@$(MY_POD_NAME).rabbitmq2-rabbitmq-ha-discovery.default.svc.cluster.local
            - name: K8S_HOSTNAME_SUFFIX
              value: .rabbitmq2-rabbitmq-ha-discovery.default.svc.cluster.local
            - name: K8S_SERVICE_NAME
              value: rabbitmq2-rabbitmq-ha-discovery
            - name: RABBITMQ_ERLANG_COOKIE
              valueFrom:
                secretKeyRef:
                  name: rabbitmq2-rabbitmq-ha
                  key: rabbitmq-erlang-cookie
            - name: RABBIT_MANAGEMENT_USER
              valueFrom:
                secretKeyRef:
                  name: rabbitmq2-rabbitmq-ha
                  key: rabbitmq-management-username
            - name: RABBIT_MANAGEMENT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: rabbitmq2-rabbitmq-ha
                  key: rabbitmq-management-password
          resources:
            {}
          volumeMounts:
            - name: data
              mountPath: /var/lib/rabbitmq
            - name: config
              mountPath: /etc/rabbitmq
            - name: definitions
              mountPath: /etc/definitions
              readOnly: true
        
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 1
              podAffinityTerm:
                topologyKey: "kubernetes.io/hostname"
                labelSelector:
                  matchLabels:
                    app: rabbitmq-ha
                    release: rabbitmq2
      volumes:
        - name: config
          emptyDir: {}
        - name: configmap
          configMap:
            name: rabbitmq2-rabbitmq-ha
        - name: definitions
          secret:
            secretName: rabbitmq2-rabbitmq-ha
            items:
            - key: definitions.json
              path: definitions.json
        - name: data
          emptyDir: {}

NOTES:
** Please be patient while the chart is being deployed **

  Credentials:

    Username            : guest
    Password            : $(kubectl get secret --namespace default rabbitmq2-rabbitmq-ha -o jsonpath="{.data.rabbitmq-password}" | base64 --decode)
    Management username : management
    Management password : $(kubectl get secret --namespace default rabbitmq2-rabbitmq-ha -o jsonpath="{.data.rabbitmq-management-password}" | base64 --decode)
    ErLang Cookie       : $(kubectl get secret --namespace default rabbitmq2-rabbitmq-ha -o jsonpath="{.data.rabbitmq-erlang-cookie}" | base64 --decode)

  RabbitMQ can be accessed within the cluster on port 5672 at rabbitmq2-rabbitmq-ha.default.svc.cluster.local

  To access the cluster externally execute the following commands:

    export NODE_IP=$(kubectl get nodes --namespace default -o jsonpath="{.items[0].status.addresses[?(@.type=='ExternalIP')].address}")
    export NODE_PORT_AMQP=$(kubectl get --namespace default -o jsonpath='{.spec.ports[?(@.name=="amqp")].nodePort}' services rabbitmq2-rabbitmq-ha)
    export NODE_PORT_STATS=$(kubectl get --namespace default -o jsonpath='{.spec.ports[?(@.name=="http")].nodePort}' services rabbitmq2-rabbitmq-ha)  
  To Access the RabbitMQ AMQP port:

    amqp://$NODE_IP:$NODE_PORT_AMQP/ 

  To Access the RabbitMQ Management interface:

    http://$NODE_IP:$NODE_PORT_STATS/
